from autoviz.AutoViz_Class import AutoViz_Class
import streamlit as st
import tempfile
import os

def autoVizs():
    if 'df' not in st.session_state or st.session_state.df is None or st.session_state.df.empty:
        st.error("Please provide the data to proceed.")
        return
    df = st.session_state.df

    # Initialize AutoViz
    AV = AutoViz_Class()

    # Streamlit app
    st.title("AutoViz Visualization")
    chart_format = st.selectbox("Choose the chart format",["html","svg"])
    # Use a temporary directory to save AutoViz outputs
    with tempfile.TemporaryDirectory() as temp_dir:
        # Generate AutoViz visualizations
        st.write("Generating AutoViz Visualizations...")
        try:
            av_html = AV.AutoViz(
                filename="",
                dfte=df,
                depVar='',
                verbose=2,  # Set verbose to a higher level for more debug information
                lowess=False,
                chart_format=chart_format,  # Set chart format to 'svg'
                save_plot_dir=temp_dir
            )
        except Exception as e:
            st.error(f"Error generating AutoViz visualizations: {e}")
            st.error("Please try using a different visualization method.")

        # Check if SVG files are generated in the nested directory
        nested_dir = os.path.join(temp_dir, "AutoViz")
        if not os.path.exists(nested_dir):
            st.write("AutoViz output directory does not exist.")
        else:
            chart_format_fm = "."+chart_format
            v_files = [os.path.join(nested_dir, f) for f in os.listdir(nested_dir) if f.endswith(chart_format_fm)]
            if not v_files:
                st.write("No "+ chart_format + " files were generated by AutoViz.")
            else:
                st.write(f"Found {len(v_files)} {chart_format} files generated by AutoViz.")
                st.write(" ")
                # Display SVG files generated by AutoViz
                for file_path in v_files:
                    file_name = os.path.basename(file_path)
                    st.write("###",file_name)
                    # st.write(f"Displaying {file_path}")
                    with open(file_path, "r", encoding='utf-8') as f:
                        content = f.read()
                        label = "Download "+chart_format
                        if chart_format == 'html':
                            mime = "text/html"
                        else:
                            mime = "image/svg+xml"
                        st.download_button(
                            label=label,
                            data=content,
                            file_name=os.path.basename(file_path),
                            mime=mime
                        )
                        st.components.v1.html(content, height=600, scrolling=True)




